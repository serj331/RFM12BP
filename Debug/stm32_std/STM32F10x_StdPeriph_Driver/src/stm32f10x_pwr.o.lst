   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f10x_pwr.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.PWR_DeInit,"ax",%progbits
  19              		.align	2
  20              		.global	PWR_DeInit
  21              		.thumb
  22              		.thumb_func
  24              	PWR_DeInit:
  25              	.LFB56:
  26              		.file 1 "../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c"
   1:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
   2:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   ******************************************************************************
   3:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @file    stm32f10x_pwr.c
   4:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @author  MCD Application Team
   5:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @version V3.5.0
   6:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @date    11-March-2011
   7:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @brief   This file provides all the PWR firmware functions.
   8:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   ******************************************************************************
   9:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @attention
  10:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *
  11:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *
  18:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   ******************************************************************************
  20:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
  21:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  22:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /* Includes ------------------------------------------------------------------*/
  23:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #include "stm32f10x_pwr.h"
  24:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #include "stm32f10x_rcc.h"
  25:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  26:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  27:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @{
  28:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
  29:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  30:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /** @defgroup PWR 
  31:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @brief PWR driver modules
  32:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @{
  33:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */ 
  34:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  35:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /** @defgroup PWR_Private_TypesDefinitions
  36:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @{
  37:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
  38:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  39:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
  40:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @}
  41:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
  42:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  43:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /** @defgroup PWR_Private_Defines
  44:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @{
  45:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
  46:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  47:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /* --------- PWR registers bit address in the alias region ---------- */
  48:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define PWR_OFFSET               (PWR_BASE - PERIPH_BASE)
  49:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  50:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /* --- CR Register ---*/
  51:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  52:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /* Alias word address of DBP bit */
  53:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define CR_OFFSET                (PWR_OFFSET + 0x00)
  54:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define DBP_BitNumber            0x08
  55:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define CR_DBP_BB                (PERIPH_BB_BASE + (CR_OFFSET * 32) + (DBP_BitNumber * 4))
  56:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  57:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /* Alias word address of PVDE bit */
  58:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define PVDE_BitNumber           0x04
  59:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define CR_PVDE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PVDE_BitNumber * 4))
  60:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  61:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /* --- CSR Register ---*/
  62:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  63:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /* Alias word address of EWUP bit */
  64:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define CSR_OFFSET               (PWR_OFFSET + 0x04)
  65:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define EWUP_BitNumber           0x08
  66:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define CSR_EWUP_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (EWUP_BitNumber * 4))
  67:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  68:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /* ------------------ PWR registers bit mask ------------------------ */
  69:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  70:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /* CR register bit mask */
  71:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define CR_DS_MASK               ((uint32_t)0xFFFFFFFC)
  72:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #define CR_PLS_MASK              ((uint32_t)0xFFFFFF1F)
  73:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  74:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  75:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
  76:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @}
  77:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
  78:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  79:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /** @defgroup PWR_Private_Macros
  80:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @{
  81:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
  82:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  83:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
  84:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @}
  85:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
  86:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  87:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /** @defgroup PWR_Private_Variables
  88:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @{
  89:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
  90:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  91:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
  92:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @}
  93:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
  94:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  95:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /** @defgroup PWR_Private_FunctionPrototypes
  96:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @{
  97:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
  98:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
  99:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
 100:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @}
 101:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 102:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
 103:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /** @defgroup PWR_Private_Functions
 104:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @{
 105:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 106:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
 107:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
 108:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @brief  Deinitializes the PWR peripheral registers to their default reset values.
 109:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @param  None
 110:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @retval None
 111:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 112:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** void PWR_DeInit(void)
 113:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** {
  27              		.loc 1 113 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 00AF     		add	r7, sp, #0
  36              		.cfi_def_cfa_register 7
 114:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
  37              		.loc 1 114 0
  38 0004 4FF08050 		mov	r0, #268435456
  39 0008 0121     		movs	r1, #1
  40 000a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 115:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
  41              		.loc 1 115 0
  42 000e 4FF08050 		mov	r0, #268435456
  43 0012 0021     		movs	r1, #0
  44 0014 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 116:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** }
  45              		.loc 1 116 0
  46 0018 80BD     		pop	{r7, pc}
  47              		.cfi_endproc
  48              	.LFE56:
  50 001a 00BF     		.section	.text.PWR_BackupAccessCmd,"ax",%progbits
  51              		.align	2
  52              		.global	PWR_BackupAccessCmd
  53              		.thumb
  54              		.thumb_func
  56              	PWR_BackupAccessCmd:
  57              	.LFB57:
 117:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
 118:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
 119:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @brief  Enables or disables access to the RTC and backup registers.
 120:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @param  NewState: new state of the access to the RTC and backup registers.
 121:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *   This parameter can be: ENABLE or DISABLE.
 122:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @retval None
 123:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 124:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** void PWR_BackupAccessCmd(FunctionalState NewState)
 125:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** {
  58              		.loc 1 125 0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 8
  61              		@ frame_needed = 1, uses_anonymous_args = 0
  62              		@ link register save eliminated.
  63 0000 80B4     		push	{r7}
  64              		.cfi_def_cfa_offset 4
  65              		.cfi_offset 7, -4
  66 0002 83B0     		sub	sp, sp, #12
  67              		.cfi_def_cfa_offset 16
  68 0004 00AF     		add	r7, sp, #0
  69              		.cfi_def_cfa_register 7
  70 0006 0346     		mov	r3, r0
  71 0008 FB71     		strb	r3, [r7, #7]
 126:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Check the parameters */
 127:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 128:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
  72              		.loc 1 128 0
  73 000a 2023     		movs	r3, #32
  74 000c C4F20E23 		movt	r3, 16910
  75 0010 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
  76 0012 1A60     		str	r2, [r3]
 129:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** }
  77              		.loc 1 129 0
  78 0014 0C37     		adds	r7, r7, #12
  79 0016 BD46     		mov	sp, r7
  80              		@ sp needed
  81 0018 5DF8047B 		ldr	r7, [sp], #4
  82 001c 7047     		bx	lr
  83              		.cfi_endproc
  84              	.LFE57:
  86 001e 00BF     		.section	.text.PWR_PVDCmd,"ax",%progbits
  87              		.align	2
  88              		.global	PWR_PVDCmd
  89              		.thumb
  90              		.thumb_func
  92              	PWR_PVDCmd:
  93              	.LFB58:
 130:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
 131:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
 132:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @brief  Enables or disables the Power Voltage Detector(PVD).
 133:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @param  NewState: new state of the PVD.
 134:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *   This parameter can be: ENABLE or DISABLE.
 135:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @retval None
 136:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 137:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** void PWR_PVDCmd(FunctionalState NewState)
 138:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** {
  94              		.loc 1 138 0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 8
  97              		@ frame_needed = 1, uses_anonymous_args = 0
  98              		@ link register save eliminated.
  99 0000 80B4     		push	{r7}
 100              		.cfi_def_cfa_offset 4
 101              		.cfi_offset 7, -4
 102 0002 83B0     		sub	sp, sp, #12
 103              		.cfi_def_cfa_offset 16
 104 0004 00AF     		add	r7, sp, #0
 105              		.cfi_def_cfa_register 7
 106 0006 0346     		mov	r3, r0
 107 0008 FB71     		strb	r3, [r7, #7]
 139:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Check the parameters */
 140:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 141:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 108              		.loc 1 141 0
 109 000a 1023     		movs	r3, #16
 110 000c C4F20E23 		movt	r3, 16910
 111 0010 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 112 0012 1A60     		str	r2, [r3]
 142:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** }
 113              		.loc 1 142 0
 114 0014 0C37     		adds	r7, r7, #12
 115 0016 BD46     		mov	sp, r7
 116              		@ sp needed
 117 0018 5DF8047B 		ldr	r7, [sp], #4
 118 001c 7047     		bx	lr
 119              		.cfi_endproc
 120              	.LFE58:
 122 001e 00BF     		.section	.text.PWR_PVDLevelConfig,"ax",%progbits
 123              		.align	2
 124              		.global	PWR_PVDLevelConfig
 125              		.thumb
 126              		.thumb_func
 128              	PWR_PVDLevelConfig:
 129              	.LFB59:
 143:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
 144:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
 145:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @brief  Configures the voltage threshold detected by the Power Voltage Detector(PVD).
 146:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @param  PWR_PVDLevel: specifies the PVD detection level
 147:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *   This parameter can be one of the following values:
 148:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V2: PVD detection level set to 2.2V
 149:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V3: PVD detection level set to 2.3V
 150:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V4: PVD detection level set to 2.4V
 151:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V5: PVD detection level set to 2.5V
 152:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V6: PVD detection level set to 2.6V
 153:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V7: PVD detection level set to 2.7V
 154:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V8: PVD detection level set to 2.8V
 155:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V9: PVD detection level set to 2.9V
 156:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @retval None
 157:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 158:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
 159:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** {
 130              		.loc 1 159 0
 131              		.cfi_startproc
 132              		@ args = 0, pretend = 0, frame = 16
 133              		@ frame_needed = 1, uses_anonymous_args = 0
 134              		@ link register save eliminated.
 135 0000 80B4     		push	{r7}
 136              		.cfi_def_cfa_offset 4
 137              		.cfi_offset 7, -4
 138 0002 85B0     		sub	sp, sp, #20
 139              		.cfi_def_cfa_offset 24
 140 0004 00AF     		add	r7, sp, #0
 141              		.cfi_def_cfa_register 7
 142 0006 7860     		str	r0, [r7, #4]
 160:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   uint32_t tmpreg = 0;
 143              		.loc 1 160 0
 144 0008 0023     		movs	r3, #0
 145 000a FB60     		str	r3, [r7, #12]
 161:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Check the parameters */
 162:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
 163:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   tmpreg = PWR->CR;
 146              		.loc 1 163 0
 147 000c 4FF4E043 		mov	r3, #28672
 148 0010 C4F20003 		movt	r3, 16384
 149 0014 1B68     		ldr	r3, [r3]
 150 0016 FB60     		str	r3, [r7, #12]
 164:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Clear PLS[7:5] bits */
 165:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   tmpreg &= CR_PLS_MASK;
 151              		.loc 1 165 0
 152 0018 FB68     		ldr	r3, [r7, #12]
 153 001a 23F0E003 		bic	r3, r3, #224
 154 001e FB60     		str	r3, [r7, #12]
 166:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Set PLS[7:5] bits according to PWR_PVDLevel value */
 167:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   tmpreg |= PWR_PVDLevel;
 155              		.loc 1 167 0
 156 0020 FA68     		ldr	r2, [r7, #12]
 157 0022 7B68     		ldr	r3, [r7, #4]
 158 0024 1343     		orrs	r3, r3, r2
 159 0026 FB60     		str	r3, [r7, #12]
 168:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Store the new value */
 169:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   PWR->CR = tmpreg;
 160              		.loc 1 169 0
 161 0028 4FF4E043 		mov	r3, #28672
 162 002c C4F20003 		movt	r3, 16384
 163 0030 FA68     		ldr	r2, [r7, #12]
 164 0032 1A60     		str	r2, [r3]
 170:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** }
 165              		.loc 1 170 0
 166 0034 1437     		adds	r7, r7, #20
 167 0036 BD46     		mov	sp, r7
 168              		@ sp needed
 169 0038 5DF8047B 		ldr	r7, [sp], #4
 170 003c 7047     		bx	lr
 171              		.cfi_endproc
 172              	.LFE59:
 174 003e 00BF     		.section	.text.PWR_WakeUpPinCmd,"ax",%progbits
 175              		.align	2
 176              		.global	PWR_WakeUpPinCmd
 177              		.thumb
 178              		.thumb_func
 180              	PWR_WakeUpPinCmd:
 181              	.LFB60:
 171:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
 172:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
 173:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @brief  Enables or disables the WakeUp Pin functionality.
 174:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @param  NewState: new state of the WakeUp Pin functionality.
 175:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *   This parameter can be: ENABLE or DISABLE.
 176:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @retval None
 177:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 178:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** void PWR_WakeUpPinCmd(FunctionalState NewState)
 179:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** {
 182              		.loc 1 179 0
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 8
 185              		@ frame_needed = 1, uses_anonymous_args = 0
 186              		@ link register save eliminated.
 187 0000 80B4     		push	{r7}
 188              		.cfi_def_cfa_offset 4
 189              		.cfi_offset 7, -4
 190 0002 83B0     		sub	sp, sp, #12
 191              		.cfi_def_cfa_offset 16
 192 0004 00AF     		add	r7, sp, #0
 193              		.cfi_def_cfa_register 7
 194 0006 0346     		mov	r3, r0
 195 0008 FB71     		strb	r3, [r7, #7]
 180:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Check the parameters */
 181:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 182:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 196              		.loc 1 182 0
 197 000a A023     		movs	r3, #160
 198 000c C4F20E23 		movt	r3, 16910
 199 0010 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 200 0012 1A60     		str	r2, [r3]
 183:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** }
 201              		.loc 1 183 0
 202 0014 0C37     		adds	r7, r7, #12
 203 0016 BD46     		mov	sp, r7
 204              		@ sp needed
 205 0018 5DF8047B 		ldr	r7, [sp], #4
 206 001c 7047     		bx	lr
 207              		.cfi_endproc
 208              	.LFE60:
 210 001e 00BF     		.section	.text.PWR_EnterSTOPMode,"ax",%progbits
 211              		.align	2
 212              		.global	PWR_EnterSTOPMode
 213              		.thumb
 214              		.thumb_func
 216              	PWR_EnterSTOPMode:
 217              	.LFB61:
 184:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
 185:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
 186:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @brief  Enters STOP mode.
 187:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @param  PWR_Regulator: specifies the regulator state in STOP mode.
 188:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *   This parameter can be one of the following values:
 189:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_Regulator_ON: STOP mode with regulator ON
 190:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_Regulator_LowPower: STOP mode with regulator in low power mode
 191:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @param  PWR_STOPEntry: specifies if STOP mode in entered with WFI or WFE instruction.
 192:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *   This parameter can be one of the following values:
 193:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
 194:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
 195:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @retval None
 196:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 197:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
 198:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** {
 218              		.loc 1 198 0
 219              		.cfi_startproc
 220              		@ args = 0, pretend = 0, frame = 16
 221              		@ frame_needed = 1, uses_anonymous_args = 0
 222              		@ link register save eliminated.
 223 0000 80B4     		push	{r7}
 224              		.cfi_def_cfa_offset 4
 225              		.cfi_offset 7, -4
 226 0002 85B0     		sub	sp, sp, #20
 227              		.cfi_def_cfa_offset 24
 228 0004 00AF     		add	r7, sp, #0
 229              		.cfi_def_cfa_register 7
 230 0006 7860     		str	r0, [r7, #4]
 231 0008 0B46     		mov	r3, r1
 232 000a FB70     		strb	r3, [r7, #3]
 199:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   uint32_t tmpreg = 0;
 233              		.loc 1 199 0
 234 000c 0023     		movs	r3, #0
 235 000e FB60     		str	r3, [r7, #12]
 200:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Check the parameters */
 201:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   assert_param(IS_PWR_REGULATOR(PWR_Regulator));
 202:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
 203:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   
 204:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Select the regulator state in STOP mode ---------------------------------*/
 205:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   tmpreg = PWR->CR;
 236              		.loc 1 205 0
 237 0010 4FF4E043 		mov	r3, #28672
 238 0014 C4F20003 		movt	r3, 16384
 239 0018 1B68     		ldr	r3, [r3]
 240 001a FB60     		str	r3, [r7, #12]
 206:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Clear PDDS and LPDS bits */
 207:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   tmpreg &= CR_DS_MASK;
 241              		.loc 1 207 0
 242 001c FB68     		ldr	r3, [r7, #12]
 243 001e 23F00303 		bic	r3, r3, #3
 244 0022 FB60     		str	r3, [r7, #12]
 208:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Set LPDS bit according to PWR_Regulator value */
 209:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   tmpreg |= PWR_Regulator;
 245              		.loc 1 209 0
 246 0024 FA68     		ldr	r2, [r7, #12]
 247 0026 7B68     		ldr	r3, [r7, #4]
 248 0028 1343     		orrs	r3, r3, r2
 249 002a FB60     		str	r3, [r7, #12]
 210:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Store the new value */
 211:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   PWR->CR = tmpreg;
 250              		.loc 1 211 0
 251 002c 4FF4E043 		mov	r3, #28672
 252 0030 C4F20003 		movt	r3, 16384
 253 0034 FA68     		ldr	r2, [r7, #12]
 254 0036 1A60     		str	r2, [r3]
 212:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 213:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP;
 255              		.loc 1 213 0
 256 0038 4FF46D43 		mov	r3, #60672
 257 003c CEF20003 		movt	r3, 57344
 258 0040 4FF46D42 		mov	r2, #60672
 259 0044 CEF20002 		movt	r2, 57344
 260 0048 1269     		ldr	r2, [r2, #16]
 261 004a 42F00402 		orr	r2, r2, #4
 262 004e 1A61     		str	r2, [r3, #16]
 214:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   
 215:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Select STOP mode entry --------------------------------------------------*/
 216:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 263              		.loc 1 216 0
 264 0050 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 265 0052 012B     		cmp	r3, #1
 266 0054 01D1     		bne	.L7
 267              	.LBB8:
 268              	.LBB9:
 269              		.file 2 "D:\\workspace\\rfm12\\stm32_std\\CMSIS\\CM3\\CoreSupport/core_cmInstr.h"
   1:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /**************************************************************************//**
   2:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  * @file     core_cmInstr.h
   3:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  * @version  V3.20
   5:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  * @date     05. March 2013
   6:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  *
   7:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  * @note
   8:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  *
   9:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  ******************************************************************************/
  10:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  12:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    All rights reserved.
  13:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****      specific prior written permission.
  23:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    *
  24:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  37:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  38:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  41:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  42:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****   Access to dedicated instructions
  45:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****   @{
  46:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** */
  47:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  48:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /* ARM armcc specific functions */
  50:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  51:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #endif
  54:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  55:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  56:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  No Operation
  57:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  58:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
  60:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __NOP                             __nop
  61:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  62:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  63:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  65:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     until one of a number of events occurs.
  67:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
  68:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __WFI                             __wfi
  69:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  70:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  71:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  Wait For Event
  72:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  73:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
  76:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __WFE                             __wfe
  77:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  78:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  79:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  Send Event
  80:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  81:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
  83:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __SEV                             __sev
  84:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  85:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  86:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  88:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     memory, after the instruction has been completed.
  91:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
  92:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  93:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  94:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  95:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  96:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  97:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  98:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  99:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 100:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
 101:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 102:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 103:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  Data Memory Barrier
 104:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 105:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 106:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 107:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 108:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
 109:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 110:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 111:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 112:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 113:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function reverses the byte order in integer value.
 114:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 115:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]    value  Value to reverse
 116:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \return               Reversed value
 117:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 118:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __REV                             __rev
 119:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 120:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 121:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 122:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 123:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 124:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 125:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \return               Reversed value
 127:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 128:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 129:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 130:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** {
 131:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****   rev16 r0, r0
 132:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****   bx lr
 133:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** }
 134:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #endif
 135:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 136:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 137:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 138:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 139:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 140:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]    value  Value to reverse
 141:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \return               Reversed value
 142:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 143:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 144:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 145:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** {
 146:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****   revsh r0, r0
 147:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****   bx lr
 148:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** }
 149:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #endif
 150:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 151:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 152:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 153:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 154:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 155:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 156:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]    value  Value to rotate
 157:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 158:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \return               Rotated value
 159:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 160:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __ROR                             __ror
 161:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 162:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 163:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  Breakpoint
 164:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 165:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function causes the processor to enter Debug state.
 166:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 167:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 168:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 169:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 170:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 171:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 172:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 173:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 174:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 175:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 176:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  Reverse bit order of value
 177:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 178:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function reverses the bit order of the given value.
 179:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 180:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]    value  Value to reverse
 181:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \return               Reversed value
 182:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 183:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __RBIT                            __rbit
 184:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 185:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 186:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 187:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 188:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 189:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 190:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 191:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 192:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 193:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 194:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 195:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 196:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 197:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 198:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 199:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 200:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 201:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 202:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 203:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 204:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 205:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 206:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 207:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 208:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 209:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 210:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 211:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 212:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 213:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 214:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 215:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 216:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 217:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 218:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 219:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 220:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]  value  Value to store
 221:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 222:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \return          0  Function succeeded
 223:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \return          1  Function failed
 224:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 225:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 226:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 227:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 228:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 229:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 230:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 231:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 232:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]  value  Value to store
 233:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 234:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \return          0  Function succeeded
 235:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \return          1  Function failed
 236:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 237:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 238:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 239:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 240:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 241:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 242:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 243:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 244:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]  value  Value to store
 245:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 246:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \return          0  Function succeeded
 247:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \return          1  Function failed
 248:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 249:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 250:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 251:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 252:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  Remove the exclusive lock
 253:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 254:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 255:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 256:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 257:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __CLREX                           __clrex
 258:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 259:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 260:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  Signed Saturate
 261:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 262:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function saturates a signed value.
 263:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 264:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 265:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 266:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \return             Saturated value
 267:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 268:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __SSAT                            __ssat
 269:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 270:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 271:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  Unsigned Saturate
 272:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 273:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function saturates an unsigned value.
 274:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 275:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 276:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 277:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \return             Saturated value
 278:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 279:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __USAT                            __usat
 280:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 281:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 282:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  Count leading zeros
 283:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 284:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 285:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 286:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 287:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \return             number of leading zeros in value
 288:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 289:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __CLZ                             __clz
 290:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 291:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 292:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 293:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 294:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 295:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /* IAR iccarm specific functions */
 297:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 298:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #include <cmsis_iar.h>
 299:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 300:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 301:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /* TI CCS specific functions */
 303:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 304:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #include <cmsis_ccs.h>
 305:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 306:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 307:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /* GNU gcc specific functions */
 309:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 310:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 311:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 312:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 313:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 314:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 315:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 316:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #else
 317:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 318:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 319:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #endif
 320:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 321:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  No Operation
 322:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 323:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 324:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 325:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 326:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** {
 327:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****   __ASM volatile ("nop");
 328:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** }
 329:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 330:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 331:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  Wait For Interrupt
 332:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 333:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 334:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     until one of a number of events occurs.
 335:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 336:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
 337:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** {
 338:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****   __ASM volatile ("wfi");
 270              		.loc 2 338 0
 271              	@ 338 "D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport/core_cmInstr.h" 1
 272 0056 30BF     		wfi
 273              	@ 0 "" 2
 274              		.thumb
 275              	.LBE9:
 276              	.LBE8:
 277 0058 00E0     		b	.L8
 278              	.L7:
 279              	.LBB10:
 280              	.LBB11:
 339:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** }
 340:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 341:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 342:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  Wait For Event
 343:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 344:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 345:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 346:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 347:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
 348:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** {
 349:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****   __ASM volatile ("wfe");
 281              		.loc 2 349 0
 282              	@ 349 "D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport/core_cmInstr.h" 1
 283 005a 20BF     		wfe
 284              	@ 0 "" 2
 285              		.thumb
 286              	.L8:
 287              	.LBE11:
 288              	.LBE10:
 217:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   {   
 218:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****     /* Request Wait For Interrupt */
 219:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****     __WFI();
 220:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   }
 221:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   else
 222:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   {
 223:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****     /* Request Wait For Event */
 224:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****     __WFE();
 225:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   }
 226:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   
 227:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 228:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);  
 289              		.loc 1 228 0
 290 005c 4FF46D43 		mov	r3, #60672
 291 0060 CEF20003 		movt	r3, 57344
 292 0064 4FF46D42 		mov	r2, #60672
 293 0068 CEF20002 		movt	r2, 57344
 294 006c 1269     		ldr	r2, [r2, #16]
 295 006e 22F00402 		bic	r2, r2, #4
 296 0072 1A61     		str	r2, [r3, #16]
 229:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** }
 297              		.loc 1 229 0
 298 0074 1437     		adds	r7, r7, #20
 299 0076 BD46     		mov	sp, r7
 300              		@ sp needed
 301 0078 5DF8047B 		ldr	r7, [sp], #4
 302 007c 7047     		bx	lr
 303              		.cfi_endproc
 304              	.LFE61:
 306 007e 00BF     		.section	.text.PWR_EnterSTANDBYMode,"ax",%progbits
 307              		.align	2
 308              		.global	PWR_EnterSTANDBYMode
 309              		.thumb
 310              		.thumb_func
 312              	PWR_EnterSTANDBYMode:
 313              	.LFB62:
 230:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
 231:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
 232:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @brief  Enters STANDBY mode.
 233:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @param  None
 234:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @retval None
 235:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 236:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** void PWR_EnterSTANDBYMode(void)
 237:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** {
 314              		.loc 1 237 0
 315              		.cfi_startproc
 316              		@ args = 0, pretend = 0, frame = 0
 317              		@ frame_needed = 1, uses_anonymous_args = 0
 318              		@ link register save eliminated.
 319 0000 80B4     		push	{r7}
 320              		.cfi_def_cfa_offset 4
 321              		.cfi_offset 7, -4
 322 0002 00AF     		add	r7, sp, #0
 323              		.cfi_def_cfa_register 7
 238:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Clear Wake-up flag */
 239:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   PWR->CR |= PWR_CR_CWUF;
 324              		.loc 1 239 0
 325 0004 4FF4E043 		mov	r3, #28672
 326 0008 C4F20003 		movt	r3, 16384
 327 000c 4FF4E042 		mov	r2, #28672
 328 0010 C4F20002 		movt	r2, 16384
 329 0014 1268     		ldr	r2, [r2]
 330 0016 42F00402 		orr	r2, r2, #4
 331 001a 1A60     		str	r2, [r3]
 240:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Select STANDBY mode */
 241:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   PWR->CR |= PWR_CR_PDDS;
 332              		.loc 1 241 0
 333 001c 4FF4E043 		mov	r3, #28672
 334 0020 C4F20003 		movt	r3, 16384
 335 0024 4FF4E042 		mov	r2, #28672
 336 0028 C4F20002 		movt	r2, 16384
 337 002c 1268     		ldr	r2, [r2]
 338 002e 42F00202 		orr	r2, r2, #2
 339 0032 1A60     		str	r2, [r3]
 242:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 243:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP;
 340              		.loc 1 243 0
 341 0034 4FF46D43 		mov	r3, #60672
 342 0038 CEF20003 		movt	r3, 57344
 343 003c 4FF46D42 		mov	r2, #60672
 344 0040 CEF20002 		movt	r2, 57344
 345 0044 1269     		ldr	r2, [r2, #16]
 346 0046 42F00402 		orr	r2, r2, #4
 347 004a 1A61     		str	r2, [r3, #16]
 348              	.LBB12:
 349              	.LBB13:
 338:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** }
 350              		.loc 2 338 0
 351              	@ 338 "D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport/core_cmInstr.h" 1
 352 004c 30BF     		wfi
 353              	@ 0 "" 2
 354              		.thumb
 355              	.LBE13:
 356              	.LBE12:
 244:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /* This option is used to ensure that store operations are completed */
 245:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #if defined ( __CC_ARM   )
 246:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   __force_stores();
 247:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** #endif
 248:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Request Wait For Interrupt */
 249:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   __WFI();
 250:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** }
 357              		.loc 1 250 0
 358 004e BD46     		mov	sp, r7
 359              		@ sp needed
 360 0050 5DF8047B 		ldr	r7, [sp], #4
 361 0054 7047     		bx	lr
 362              		.cfi_endproc
 363              	.LFE62:
 365 0056 00BF     		.section	.text.PWR_GetFlagStatus,"ax",%progbits
 366              		.align	2
 367              		.global	PWR_GetFlagStatus
 368              		.thumb
 369              		.thumb_func
 371              	PWR_GetFlagStatus:
 372              	.LFB63:
 251:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
 252:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
 253:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @brief  Checks whether the specified PWR flag is set or not.
 254:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @param  PWR_FLAG: specifies the flag to check.
 255:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *   This parameter can be one of the following values:
 256:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_FLAG_WU: Wake Up flag
 257:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_FLAG_SB: StandBy flag
 258:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_FLAG_PVDO: PVD Output
 259:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @retval The new state of PWR_FLAG (SET or RESET).
 260:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 261:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
 262:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** {
 373              		.loc 1 262 0
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 16
 376              		@ frame_needed = 1, uses_anonymous_args = 0
 377              		@ link register save eliminated.
 378 0000 80B4     		push	{r7}
 379              		.cfi_def_cfa_offset 4
 380              		.cfi_offset 7, -4
 381 0002 85B0     		sub	sp, sp, #20
 382              		.cfi_def_cfa_offset 24
 383 0004 00AF     		add	r7, sp, #0
 384              		.cfi_def_cfa_register 7
 385 0006 7860     		str	r0, [r7, #4]
 263:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   FlagStatus bitstatus = RESET;
 386              		.loc 1 263 0
 387 0008 0023     		movs	r3, #0
 388 000a FB73     		strb	r3, [r7, #15]
 264:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Check the parameters */
 265:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
 266:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   
 267:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 389              		.loc 1 267 0
 390 000c 4FF4E043 		mov	r3, #28672
 391 0010 C4F20003 		movt	r3, 16384
 392 0014 5A68     		ldr	r2, [r3, #4]
 393 0016 7B68     		ldr	r3, [r7, #4]
 394 0018 1340     		ands	r3, r3, r2
 395 001a 002B     		cmp	r3, #0
 396 001c 02D0     		beq	.L11
 268:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   {
 269:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****     bitstatus = SET;
 397              		.loc 1 269 0
 398 001e 0123     		movs	r3, #1
 399 0020 FB73     		strb	r3, [r7, #15]
 400 0022 01E0     		b	.L12
 401              	.L11:
 270:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   }
 271:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   else
 272:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   {
 273:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****     bitstatus = RESET;
 402              		.loc 1 273 0
 403 0024 0023     		movs	r3, #0
 404 0026 FB73     		strb	r3, [r7, #15]
 405              	.L12:
 274:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   }
 275:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Return the flag status */
 276:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   return bitstatus;
 406              		.loc 1 276 0
 407 0028 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 277:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** }
 408              		.loc 1 277 0
 409 002a 1846     		mov	r0, r3
 410 002c 1437     		adds	r7, r7, #20
 411 002e BD46     		mov	sp, r7
 412              		@ sp needed
 413 0030 5DF8047B 		ldr	r7, [sp], #4
 414 0034 7047     		bx	lr
 415              		.cfi_endproc
 416              	.LFE63:
 418 0036 00BF     		.section	.text.PWR_ClearFlag,"ax",%progbits
 419              		.align	2
 420              		.global	PWR_ClearFlag
 421              		.thumb
 422              		.thumb_func
 424              	PWR_ClearFlag:
 425              	.LFB64:
 278:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** 
 279:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** /**
 280:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @brief  Clears the PWR's pending flags.
 281:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @param  PWR_FLAG: specifies the flag to clear.
 282:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *   This parameter can be one of the following values:
 283:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_FLAG_WU: Wake Up flag
 284:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   *     @arg PWR_FLAG_SB: StandBy flag
 285:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   * @retval None
 286:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   */
 287:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** void PWR_ClearFlag(uint32_t PWR_FLAG)
 288:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** {
 426              		.loc 1 288 0
 427              		.cfi_startproc
 428              		@ args = 0, pretend = 0, frame = 8
 429              		@ frame_needed = 1, uses_anonymous_args = 0
 430              		@ link register save eliminated.
 431 0000 80B4     		push	{r7}
 432              		.cfi_def_cfa_offset 4
 433              		.cfi_offset 7, -4
 434 0002 83B0     		sub	sp, sp, #12
 435              		.cfi_def_cfa_offset 16
 436 0004 00AF     		add	r7, sp, #0
 437              		.cfi_def_cfa_register 7
 438 0006 7860     		str	r0, [r7, #4]
 289:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   /* Check the parameters */
 290:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
 291:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****          
 292:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c ****   PWR->CR |=  PWR_FLAG << 2;
 439              		.loc 1 292 0
 440 0008 4FF4E043 		mov	r3, #28672
 441 000c C4F20003 		movt	r3, 16384
 442 0010 4FF4E042 		mov	r2, #28672
 443 0014 C4F20002 		movt	r2, 16384
 444 0018 1168     		ldr	r1, [r2]
 445 001a 7A68     		ldr	r2, [r7, #4]
 446 001c 9200     		lsls	r2, r2, #2
 447 001e 0A43     		orrs	r2, r2, r1
 448 0020 1A60     		str	r2, [r3]
 293:../stm32_std/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c **** }
 449              		.loc 1 293 0
 450 0022 0C37     		adds	r7, r7, #12
 451 0024 BD46     		mov	sp, r7
 452              		@ sp needed
 453 0026 5DF8047B 		ldr	r7, [sp], #4
 454 002a 7047     		bx	lr
 455              		.cfi_endproc
 456              	.LFE64:
 458              		.text
 459              	.Letext0:
 460              		.file 3 "c:\\program files (x86)\\mentorgraphics\\sourcery_codebench_lite_for_arm_eabi\\arm-none-e
 461              		.file 4 "D:\\workspace\\rfm12\\stm32_std\\CMSIS\\CM3\\CoreSupport/core_cm3.h"
 462              		.file 5 "D:\\workspace\\rfm12\\stm32_std\\CMSIS\\CM3\\DeviceSupport\\ST\\STM32F10x/stm32f10x.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_pwr.c
C:\Users\Serj\AppData\Local\Temp\ccXeu8zQ.s:19     .text.PWR_DeInit:00000000 $t
C:\Users\Serj\AppData\Local\Temp\ccXeu8zQ.s:24     .text.PWR_DeInit:00000000 PWR_DeInit
C:\Users\Serj\AppData\Local\Temp\ccXeu8zQ.s:51     .text.PWR_BackupAccessCmd:00000000 $t
C:\Users\Serj\AppData\Local\Temp\ccXeu8zQ.s:56     .text.PWR_BackupAccessCmd:00000000 PWR_BackupAccessCmd
C:\Users\Serj\AppData\Local\Temp\ccXeu8zQ.s:87     .text.PWR_PVDCmd:00000000 $t
C:\Users\Serj\AppData\Local\Temp\ccXeu8zQ.s:92     .text.PWR_PVDCmd:00000000 PWR_PVDCmd
C:\Users\Serj\AppData\Local\Temp\ccXeu8zQ.s:123    .text.PWR_PVDLevelConfig:00000000 $t
C:\Users\Serj\AppData\Local\Temp\ccXeu8zQ.s:128    .text.PWR_PVDLevelConfig:00000000 PWR_PVDLevelConfig
C:\Users\Serj\AppData\Local\Temp\ccXeu8zQ.s:175    .text.PWR_WakeUpPinCmd:00000000 $t
C:\Users\Serj\AppData\Local\Temp\ccXeu8zQ.s:180    .text.PWR_WakeUpPinCmd:00000000 PWR_WakeUpPinCmd
C:\Users\Serj\AppData\Local\Temp\ccXeu8zQ.s:211    .text.PWR_EnterSTOPMode:00000000 $t
C:\Users\Serj\AppData\Local\Temp\ccXeu8zQ.s:216    .text.PWR_EnterSTOPMode:00000000 PWR_EnterSTOPMode
C:\Users\Serj\AppData\Local\Temp\ccXeu8zQ.s:307    .text.PWR_EnterSTANDBYMode:00000000 $t
C:\Users\Serj\AppData\Local\Temp\ccXeu8zQ.s:312    .text.PWR_EnterSTANDBYMode:00000000 PWR_EnterSTANDBYMode
C:\Users\Serj\AppData\Local\Temp\ccXeu8zQ.s:366    .text.PWR_GetFlagStatus:00000000 $t
C:\Users\Serj\AppData\Local\Temp\ccXeu8zQ.s:371    .text.PWR_GetFlagStatus:00000000 PWR_GetFlagStatus
C:\Users\Serj\AppData\Local\Temp\ccXeu8zQ.s:419    .text.PWR_ClearFlag:00000000 $t
C:\Users\Serj\AppData\Local\Temp\ccXeu8zQ.s:424    .text.PWR_ClearFlag:00000000 PWR_ClearFlag
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.69ef232822fae12fd5bc55108b75a1e4
                           .group:00000000 wm4.stm32f10x.h.51.b859cb68ed44ee02c916b41cb8c68f1c
                           .group:00000000 wm4.core_cm3.h.47.c45d264953076019d6b3b1c20e8ad771
                           .group:00000000 wm4.newlib.h.8.384a112feabb3bef7b573ae48cde2e3b
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4.config.h.183.aa62afef667fb61d15fa64c48beb2f14
                           .group:00000000 wm4._ansi.h.23.2147fde150631f5584b9dc29b914d1b8
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm3.h.144.f4158be2ca5a330459fef4214a4bb0f1
                           .group:00000000 wm4.stm32f10x.h.522.a925aafc848b1f088438cf0e9b167b78
                           .group:00000000 wm4.stm32f10x_adc.h.83.4d35a50d598070ecea6f33bcef02c922
                           .group:00000000 wm4.stm32f10x_bkp.h.25.4622919f1e30efdad5eb44e12edd5513
                           .group:00000000 wm4.stm32f10x_can.h.25.48aab46fcce6d08400bf960b028e4698
                           .group:00000000 wm4.stm32f10x_cec.h.25.8f03450e7bbb704d96e7bc73ec0f66a7
                           .group:00000000 wm4.stm32f10x_dac.h.25.d946244edf026333094657d55ea894b8
                           .group:00000000 wm4.stm32f10x_dbgmcu.h.25.d3351200fc7f9c8615d1ae81d40db08a
                           .group:00000000 wm4.stm32f10x_dma.h.25.94e36204daa98cae5dcc70a10a9694d5
                           .group:00000000 wm4.stm32f10x_exti.h.25.b9064155c5c006b5154b39788c79001a
                           .group:00000000 wm4.stm32f10x_flash.h.25.4be61fcb02863962a1e006449d310650
                           .group:00000000 wm4.stm32f10x_fsmc.h.25.bca154da2699cdb6024c0c6c4fc5aa89
                           .group:00000000 wm4.stm32f10x_gpio.h.25.80c981af0e637567395034c576cfb3ce
                           .group:00000000 wm4.stm32f10x_i2c.h.25.7b6cbaea24c6f25f538f8516d1814cb2
                           .group:00000000 wm4.stm32f10x_iwdg.h.25.da9374ab9856795610487f312ccf3122
                           .group:00000000 wm4.stm32f10x_rcc.h.25.fe8897e7491f2eb0cff54551d08eb765
                           .group:00000000 wm4.stm32f10x_rtc.h.25.361142606ba98ddcd10369f321f6e636
                           .group:00000000 wm4.stm32f10x_sdio.h.25.1fb5280a7690ef99070096bf8c866b3a
                           .group:00000000 wm4.stm32f10x_spi.h.25.68b3d5ccfcf895f9fe505ce20c0c300f
                           .group:00000000 wm4.stm32f10x_tim.h.25.21c6ec062f1e74898cb96a57da276fec
                           .group:00000000 wm4.stm32f10x_usart.h.25.29629c699b65db3f3efd3561f66b0bf6
                           .group:00000000 wm4.stm32f10x_wwdg.h.25.dde12201d86b5aa9ecaafb5eccdc6549
                           .group:00000000 wm4.misc.h.25.068e106f368fa5369a681ef57c106f4b
                           .group:00000000 wm4.stm32f10x.h.8304.f7d8ad90959e99679b3257267c3aadfe
                           .group:00000000 wm4.stm32f10x_pwr.h.58.354f21f5b361fcd5696119ebefe92201

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
