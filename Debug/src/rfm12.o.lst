   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"rfm12.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.GPIO_config,"ax",%progbits
  19              		.align	2
  20              		.global	GPIO_config
  21              		.thumb
  22              		.thumb_func
  24              	GPIO_config:
  25              	.LFB56:
  26              		.file 1 "../src/rfm12.c"
   1:../src/rfm12.c **** #include "stm32f10x.h"
   2:../src/rfm12.c **** #include "delay.h"
   3:../src/rfm12.c **** 
   4:../src/rfm12.c **** #define SS_LO() GPIOB->BSRR = GPIO_BSRR_BR12
   5:../src/rfm12.c **** #define SS_HI() GPIOB->BSRR = GPIO_BSRR_BS12
   6:../src/rfm12.c **** #define SCK_LO() GPIOB->BSRR = GPIO_BSRR_BR13
   7:../src/rfm12.c **** #define SCK_HI() GPIOB->BSRR = GPIO_BSRR_BS13
   8:../src/rfm12.c **** #define MOSI_LO() GPIOB->BSRR = GPIO_BSRR_BR15
   9:../src/rfm12.c **** #define MOSI_HI() GPIOB->BSRR = GPIO_BSRR_BS15
  10:../src/rfm12.c **** 
  11:../src/rfm12.c **** typedef enum {
  12:../src/rfm12.c **** 	RGITFFIT=0x8000,  //TX ready for next byte or FIFO received data Status
  13:../src/rfm12.c **** 	POR=0x4000, // Power on Reset Status
  14:../src/rfm12.c **** 	RGURFFOV=0x2000,	// TX Register underun or RX FIFO Overflow Status
  15:../src/rfm12.c **** 	WKUP=0x1000,      // Wakeup Timer overflow Status
  16:../src/rfm12.c **** 	INTEXT=0x0800,      // Interrup on external source Status
  17:../src/rfm12.c **** 	LBD=0x0400,      // Low battery detect Status
  18:../src/rfm12.c **** 	FFEM=0x0200,     // FIFO Empty Status
  19:../src/rfm12.c **** 	ATS=0x0100,      // Antenna Tuning Signal Detect Status
  20:../src/rfm12.c **** 	RSSI=0x0080,      // Received Signal Strength Indicator Status
  21:../src/rfm12.c **** 	DQD=0x0040,      // Data Quality Dedector Status
  22:../src/rfm12.c **** 	CRL=0x0020,      // Clock Recovery Locked status
  23:../src/rfm12.c **** 	ATGL=0x0010,      // Toggling in each AFC Cycle
  24:../src/rfm12.c **** 	OFFS_SIGN=0x0008,      // Measured Offset Frequency Sign Value 1='+', 0='-'
  25:../src/rfm12.c **** 	OFFS=0x0004,      // Measured offset Frequency value (3 bits)
  26:../src/rfm12.c **** 	OFFS_MASK=0x0003      // Measured offset mask
  27:../src/rfm12.c **** } RFM12Status;
  28:../src/rfm12.c **** 
  29:../src/rfm12.c **** void GPIO_config() {
  27              		.loc 1 29 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 82B0     		sub	sp, sp, #8
  36              		.cfi_def_cfa_offset 16
  37 0004 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
  30:../src/rfm12.c **** 	GPIO_InitTypeDef gpioInit;
  31:../src/rfm12.c **** 
  32:../src/rfm12.c **** 	RCC_APB2PeriphClockCmd(RCC_APB2ENR_IOPBEN, ENABLE);
  39              		.loc 1 32 0
  40 0006 0820     		movs	r0, #8
  41 0008 0121     		movs	r1, #1
  42 000a FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
  33:../src/rfm12.c **** 
  34:../src/rfm12.c **** 	gpioInit.GPIO_Pin = GPIO_Pin_15 | GPIO_Pin_13; //MOSI, SCK
  43              		.loc 1 34 0
  44 000e 4FF42043 		mov	r3, #40960
  45 0012 BB80     		strh	r3, [r7, #4]	@ movhi
  35:../src/rfm12.c **** 	gpioInit.GPIO_Mode = GPIO_Mode_Out_PP;
  46              		.loc 1 35 0
  47 0014 1023     		movs	r3, #16
  48 0016 FB71     		strb	r3, [r7, #7]
  36:../src/rfm12.c **** 	gpioInit.GPIO_Speed = GPIO_Speed_50MHz;
  49              		.loc 1 36 0
  50 0018 0323     		movs	r3, #3
  51 001a BB71     		strb	r3, [r7, #6]
  37:../src/rfm12.c **** 	GPIO_Init(GPIOB, &gpioInit);
  52              		.loc 1 37 0
  53 001c 3B1D     		adds	r3, r7, #4
  54 001e 4FF44060 		mov	r0, #3072
  55 0022 C4F20100 		movt	r0, 16385
  56 0026 1946     		mov	r1, r3
  57 0028 FFF7FEFF 		bl	GPIO_Init
  38:../src/rfm12.c **** 
  39:../src/rfm12.c **** 	gpioInit.GPIO_Pin = GPIO_Pin_14; //MISO
  58              		.loc 1 39 0
  59 002c 4FF48043 		mov	r3, #16384
  60 0030 BB80     		strh	r3, [r7, #4]	@ movhi
  40:../src/rfm12.c **** 	gpioInit.GPIO_Mode = GPIO_Mode_IPD;
  61              		.loc 1 40 0
  62 0032 2823     		movs	r3, #40
  63 0034 FB71     		strb	r3, [r7, #7]
  41:../src/rfm12.c **** 	GPIO_Init(GPIOB, &gpioInit);
  64              		.loc 1 41 0
  65 0036 3B1D     		adds	r3, r7, #4
  66 0038 4FF44060 		mov	r0, #3072
  67 003c C4F20100 		movt	r0, 16385
  68 0040 1946     		mov	r1, r3
  69 0042 FFF7FEFF 		bl	GPIO_Init
  42:../src/rfm12.c **** 
  43:../src/rfm12.c **** 	gpioInit.GPIO_Pin = GPIO_Pin_12; //SS
  70              		.loc 1 43 0
  71 0046 4FF48053 		mov	r3, #4096
  72 004a BB80     		strh	r3, [r7, #4]	@ movhi
  44:../src/rfm12.c **** 	gpioInit.GPIO_Mode = GPIO_Mode_Out_PP;
  73              		.loc 1 44 0
  74 004c 1023     		movs	r3, #16
  75 004e FB71     		strb	r3, [r7, #7]
  45:../src/rfm12.c **** 	GPIO_Init(GPIOB, &gpioInit);
  76              		.loc 1 45 0
  77 0050 3B1D     		adds	r3, r7, #4
  78 0052 4FF44060 		mov	r0, #3072
  79 0056 C4F20100 		movt	r0, 16385
  80 005a 1946     		mov	r1, r3
  81 005c FFF7FEFF 		bl	GPIO_Init
  46:../src/rfm12.c **** 
  47:../src/rfm12.c **** 	gpioInit.GPIO_Pin = GPIO_Pin_5; //NIRQ
  82              		.loc 1 47 0
  83 0060 2023     		movs	r3, #32
  84 0062 BB80     		strh	r3, [r7, #4]	@ movhi
  48:../src/rfm12.c **** 	gpioInit.GPIO_Mode = GPIO_Mode_IPU;
  85              		.loc 1 48 0
  86 0064 4823     		movs	r3, #72
  87 0066 FB71     		strb	r3, [r7, #7]
  49:../src/rfm12.c **** 	GPIO_Init(GPIOB, &gpioInit);
  88              		.loc 1 49 0
  89 0068 3B1D     		adds	r3, r7, #4
  90 006a 4FF44060 		mov	r0, #3072
  91 006e C4F20100 		movt	r0, 16385
  92 0072 1946     		mov	r1, r3
  93 0074 FFF7FEFF 		bl	GPIO_Init
  50:../src/rfm12.c **** 
  51:../src/rfm12.c **** 	gpioInit.GPIO_Pin = GPIO_Pin_6; //NRES
  94              		.loc 1 51 0
  95 0078 4023     		movs	r3, #64
  96 007a BB80     		strh	r3, [r7, #4]	@ movhi
  52:../src/rfm12.c **** 	gpioInit.GPIO_Mode = GPIO_Mode_Out_PP;
  97              		.loc 1 52 0
  98 007c 1023     		movs	r3, #16
  99 007e FB71     		strb	r3, [r7, #7]
  53:../src/rfm12.c **** 	GPIO_Init(GPIOB, &gpioInit);
 100              		.loc 1 53 0
 101 0080 3B1D     		adds	r3, r7, #4
 102 0082 4FF44060 		mov	r0, #3072
 103 0086 C4F20100 		movt	r0, 16385
 104 008a 1946     		mov	r1, r3
 105 008c FFF7FEFF 		bl	GPIO_Init
  54:../src/rfm12.c **** 
  55:../src/rfm12.c **** 	SS_HI();
 106              		.loc 1 55 0
 107 0090 4FF44063 		mov	r3, #3072
 108 0094 C4F20103 		movt	r3, 16385
 109 0098 4FF48052 		mov	r2, #4096
 110 009c 1A61     		str	r2, [r3, #16]
  56:../src/rfm12.c **** 	SCK_LO();
 111              		.loc 1 56 0
 112 009e 4FF44063 		mov	r3, #3072
 113 00a2 C4F20103 		movt	r3, 16385
 114 00a6 4FF00052 		mov	r2, #536870912
 115 00aa 1A61     		str	r2, [r3, #16]
  57:../src/rfm12.c **** 	MOSI_LO();
 116              		.loc 1 57 0
 117 00ac 4FF44063 		mov	r3, #3072
 118 00b0 C4F20103 		movt	r3, 16385
 119 00b4 4FF00042 		mov	r2, #-2147483648
 120 00b8 1A61     		str	r2, [r3, #16]
  58:../src/rfm12.c **** }
 121              		.loc 1 58 0
 122 00ba 0837     		adds	r7, r7, #8
 123 00bc BD46     		mov	sp, r7
 124              		@ sp needed
 125 00be 80BD     		pop	{r7, pc}
 126              		.cfi_endproc
 127              	.LFE56:
 129              		.section	.text.__fixedDelay,"ax",%progbits
 130              		.align	2
 131              		.thumb
 132              		.thumb_func
 134              	__fixedDelay:
 135              	.LFB57:
  59:../src/rfm12.c **** 
  60:../src/rfm12.c **** static void __fixedDelay() {
 136              		.loc 1 60 0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 1, uses_anonymous_args = 0
 140              		@ link register save eliminated.
 141 0000 80B4     		push	{r7}
 142              		.cfi_def_cfa_offset 4
 143              		.cfi_offset 7, -4
 144 0002 00AF     		add	r7, sp, #0
 145              		.cfi_def_cfa_register 7
 146              	.LBB12:
 147              	.LBB13:
 148              		.file 2 "D:\\workspace\\rfm12\\stm32_std\\CMSIS\\CM3\\CoreSupport/core_cmInstr.h"
   1:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /**************************************************************************//**
   2:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  * @file     core_cmInstr.h
   3:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  * @version  V3.20
   5:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  * @date     05. March 2013
   6:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  *
   7:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  * @note
   8:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  *
   9:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  ******************************************************************************/
  10:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  12:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    All rights reserved.
  13:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****      specific prior written permission.
  23:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    *
  24:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  37:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  38:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  41:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  42:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****   Access to dedicated instructions
  45:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****   @{
  46:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** */
  47:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  48:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /* ARM armcc specific functions */
  50:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  51:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #endif
  54:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  55:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  56:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  No Operation
  57:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  58:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
  60:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __NOP                             __nop
  61:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  62:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  63:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  65:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     until one of a number of events occurs.
  67:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
  68:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __WFI                             __wfi
  69:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  70:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  71:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  Wait For Event
  72:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  73:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
  76:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __WFE                             __wfe
  77:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  78:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  79:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  Send Event
  80:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  81:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
  83:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __SEV                             __sev
  84:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  85:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  86:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  88:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     memory, after the instruction has been completed.
  91:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
  92:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  93:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  94:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  95:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  96:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
  97:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  98:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  99:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 100:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
 101:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 102:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 103:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  Data Memory Barrier
 104:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 105:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 106:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 107:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 108:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
 109:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 110:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 111:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 112:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 113:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function reverses the byte order in integer value.
 114:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 115:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]    value  Value to reverse
 116:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \return               Reversed value
 117:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 118:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __REV                             __rev
 119:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 120:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 121:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 122:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 123:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 124:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 125:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \return               Reversed value
 127:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 128:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 129:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 130:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** {
 131:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****   rev16 r0, r0
 132:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****   bx lr
 133:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** }
 134:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #endif
 135:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 136:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 137:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 138:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 139:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 140:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]    value  Value to reverse
 141:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \return               Reversed value
 142:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 143:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 144:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 145:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** {
 146:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****   revsh r0, r0
 147:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****   bx lr
 148:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** }
 149:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #endif
 150:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 151:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 152:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 153:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 154:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 155:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 156:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]    value  Value to rotate
 157:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 158:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \return               Rotated value
 159:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 160:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __ROR                             __ror
 161:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 162:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 163:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  Breakpoint
 164:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 165:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function causes the processor to enter Debug state.
 166:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 167:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 168:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 169:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 170:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 171:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 172:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 173:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 174:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 175:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 176:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  Reverse bit order of value
 177:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 178:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function reverses the bit order of the given value.
 179:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 180:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]    value  Value to reverse
 181:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \return               Reversed value
 182:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 183:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __RBIT                            __rbit
 184:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 185:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 186:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 187:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 188:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 189:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 190:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 191:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 192:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 193:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 194:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 195:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 196:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 197:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 198:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 199:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 200:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 201:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 202:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 203:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 204:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 205:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 206:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 207:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 208:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 209:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 210:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 211:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 212:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 213:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 214:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 215:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 216:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 217:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 218:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 219:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 220:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]  value  Value to store
 221:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 222:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \return          0  Function succeeded
 223:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \return          1  Function failed
 224:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 225:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 226:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 227:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 228:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 229:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 230:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 231:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 232:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]  value  Value to store
 233:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 234:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \return          0  Function succeeded
 235:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \return          1  Function failed
 236:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 237:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 238:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 239:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 240:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 241:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 242:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 243:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 244:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]  value  Value to store
 245:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 246:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \return          0  Function succeeded
 247:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \return          1  Function failed
 248:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 249:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 250:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 251:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 252:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  Remove the exclusive lock
 253:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 254:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 255:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 256:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 257:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __CLREX                           __clrex
 258:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 259:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 260:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  Signed Saturate
 261:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 262:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function saturates a signed value.
 263:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 264:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 265:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 266:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \return             Saturated value
 267:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 268:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __SSAT                            __ssat
 269:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 270:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 271:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  Unsigned Saturate
 272:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 273:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function saturates an unsigned value.
 274:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 275:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 276:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 277:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \return             Saturated value
 278:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 279:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __USAT                            __usat
 280:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 281:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 282:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  Count leading zeros
 283:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 284:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 285:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 286:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 287:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     \return             number of leading zeros in value
 288:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 289:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __CLZ                             __clz
 290:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 291:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 292:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 293:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 294:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 295:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /* IAR iccarm specific functions */
 297:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 298:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #include <cmsis_iar.h>
 299:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 300:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 301:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /* TI CCS specific functions */
 303:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 304:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #include <cmsis_ccs.h>
 305:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 306:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 307:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /* GNU gcc specific functions */
 309:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 310:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 311:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 312:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 313:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 314:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 315:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 316:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #else
 317:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 318:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 319:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** #endif
 320:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 321:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** /** \brief  No Operation
 322:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** 
 323:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 324:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****  */
 325:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 326:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h **** {
 327:D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport\core_cmInstr.h ****   __ASM volatile ("nop");
 149              		.loc 2 327 0
 150              	@ 327 "D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport/core_cmInstr.h" 1
 151 0004 00BF     		nop
 152              	@ 0 "" 2
 153              		.thumb
 154              	.LBE13:
 155              	.LBE12:
 156              	.LBB14:
 157              	.LBB15:
 158              	@ 327 "D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport/core_cmInstr.h" 1
 159 0006 00BF     		nop
 160              	@ 0 "" 2
 161              		.thumb
 162              	.LBE15:
 163              	.LBE14:
 164              	.LBB16:
 165              	.LBB17:
 166              	@ 327 "D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport/core_cmInstr.h" 1
 167 0008 00BF     		nop
 168              	@ 0 "" 2
 169              		.thumb
 170              	.LBE17:
 171              	.LBE16:
 172              	.LBB18:
 173              	.LBB19:
 174              	@ 327 "D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport/core_cmInstr.h" 1
 175 000a 00BF     		nop
 176              	@ 0 "" 2
 177              		.thumb
 178              	.LBE19:
 179              	.LBE18:
 180              	.LBB20:
 181              	.LBB21:
 182              	@ 327 "D:\workspace\rfm12\stm32_std\CMSIS\CM3\CoreSupport/core_cmInstr.h" 1
 183 000c 00BF     		nop
 184              	@ 0 "" 2
 185              		.thumb
 186              	.LBE21:
 187              	.LBE20:
  61:../src/rfm12.c **** 	__NOP();__NOP();__NOP();__NOP();__NOP();
  62:../src/rfm12.c **** }
 188              		.loc 1 62 0
 189 000e BD46     		mov	sp, r7
 190              		@ sp needed
 191 0010 5DF8047B 		ldr	r7, [sp], #4
 192 0014 7047     		bx	lr
 193              		.cfi_endproc
 194              	.LFE57:
 196 0016 00BF     		.section	.text.RFM12_writeCMD,"ax",%progbits
 197              		.align	2
 198              		.global	RFM12_writeCMD
 199              		.thumb
 200              		.thumb_func
 202              	RFM12_writeCMD:
 203              	.LFB58:
  63:../src/rfm12.c **** 
  64:../src/rfm12.c **** void RFM12_writeCMD(uint16_t cmd) {
 204              		.loc 1 64 0
 205              		.cfi_startproc
 206              		@ args = 0, pretend = 0, frame = 16
 207              		@ frame_needed = 1, uses_anonymous_args = 0
 208 0000 80B5     		push	{r7, lr}
 209              		.cfi_def_cfa_offset 8
 210              		.cfi_offset 7, -8
 211              		.cfi_offset 14, -4
 212 0002 84B0     		sub	sp, sp, #16
 213              		.cfi_def_cfa_offset 24
 214 0004 00AF     		add	r7, sp, #0
 215              		.cfi_def_cfa_register 7
 216 0006 0346     		mov	r3, r0
 217 0008 FB80     		strh	r3, [r7, #6]	@ movhi
  65:../src/rfm12.c **** 	SS_LO();
 218              		.loc 1 65 0
 219 000a 4FF44063 		mov	r3, #3072
 220 000e C4F20103 		movt	r3, 16385
 221 0012 4FF08052 		mov	r2, #268435456
 222 0016 1A61     		str	r2, [r3, #16]
 223              	.LBB22:
  66:../src/rfm12.c **** 	for(int i = 16; i --> 0; ) {
 224              		.loc 1 66 0
 225 0018 1023     		movs	r3, #16
 226 001a FB60     		str	r3, [r7, #12]
 227 001c 28E0     		b	.L4
 228              	.L7:
  67:../src/rfm12.c **** 		if((cmd >> i) & 1) {
 229              		.loc 1 67 0
 230 001e FA88     		ldrh	r2, [r7, #6]
 231 0020 FB68     		ldr	r3, [r7, #12]
 232 0022 42FA03F3 		asr	r3, r2, r3
 233 0026 03F00103 		and	r3, r3, #1
 234 002a 002B     		cmp	r3, #0
 235 002c 07D0     		beq	.L5
  68:../src/rfm12.c **** 			MOSI_HI();
 236              		.loc 1 68 0
 237 002e 4FF44063 		mov	r3, #3072
 238 0032 C4F20103 		movt	r3, 16385
 239 0036 4FF40042 		mov	r2, #32768
 240 003a 1A61     		str	r2, [r3, #16]
 241 003c 06E0     		b	.L6
 242              	.L5:
  69:../src/rfm12.c **** 		} else {
  70:../src/rfm12.c **** 			MOSI_LO();
 243              		.loc 1 70 0
 244 003e 4FF44063 		mov	r3, #3072
 245 0042 C4F20103 		movt	r3, 16385
 246 0046 4FF00042 		mov	r2, #-2147483648
 247 004a 1A61     		str	r2, [r3, #16]
 248              	.L6:
  71:../src/rfm12.c **** 		}
  72:../src/rfm12.c **** 		SCK_LO();
 249              		.loc 1 72 0
 250 004c 4FF44063 		mov	r3, #3072
 251 0050 C4F20103 		movt	r3, 16385
 252 0054 4FF00052 		mov	r2, #536870912
 253 0058 1A61     		str	r2, [r3, #16]
  73:../src/rfm12.c **** 		__fixedDelay();
 254              		.loc 1 73 0
 255 005a FFF7FEFF 		bl	__fixedDelay
  74:../src/rfm12.c **** 		SCK_HI();
 256              		.loc 1 74 0
 257 005e 4FF44063 		mov	r3, #3072
 258 0062 C4F20103 		movt	r3, 16385
 259 0066 4FF40052 		mov	r2, #8192
 260 006a 1A61     		str	r2, [r3, #16]
  75:../src/rfm12.c **** 		__fixedDelay();
 261              		.loc 1 75 0
 262 006c FFF7FEFF 		bl	__fixedDelay
 263              	.L4:
  66:../src/rfm12.c **** 		if((cmd >> i) & 1) {
 264              		.loc 1 66 0 discriminator 1
 265 0070 FB68     		ldr	r3, [r7, #12]
 266 0072 5A1E     		subs	r2, r3, #1
 267 0074 FA60     		str	r2, [r7, #12]
 268 0076 002B     		cmp	r3, #0
 269 0078 D1DC     		bgt	.L7
 270              	.LBE22:
  76:../src/rfm12.c **** 	}
  77:../src/rfm12.c **** 	SCK_LO();
 271              		.loc 1 77 0
 272 007a 4FF44063 		mov	r3, #3072
 273 007e C4F20103 		movt	r3, 16385
 274 0082 4FF00052 		mov	r2, #536870912
 275 0086 1A61     		str	r2, [r3, #16]
  78:../src/rfm12.c **** 	SS_HI();
 276              		.loc 1 78 0
 277 0088 4FF44063 		mov	r3, #3072
 278 008c C4F20103 		movt	r3, 16385
 279 0090 4FF48052 		mov	r2, #4096
 280 0094 1A61     		str	r2, [r3, #16]
  79:../src/rfm12.c **** }
 281              		.loc 1 79 0
 282 0096 1037     		adds	r7, r7, #16
 283 0098 BD46     		mov	sp, r7
 284              		@ sp needed
 285 009a 80BD     		pop	{r7, pc}
 286              		.cfi_endproc
 287              	.LFE58:
 289              		.section	.text.RFM12_readStatus,"ax",%progbits
 290              		.align	2
 291              		.global	RFM12_readStatus
 292              		.thumb
 293              		.thumb_func
 295              	RFM12_readStatus:
 296              	.LFB59:
  80:../src/rfm12.c **** 
  81:../src/rfm12.c **** int RFM12_readStatus() {
 297              		.loc 1 81 0
 298              		.cfi_startproc
 299              		@ args = 0, pretend = 0, frame = 8
 300              		@ frame_needed = 1, uses_anonymous_args = 0
 301 0000 80B5     		push	{r7, lr}
 302              		.cfi_def_cfa_offset 8
 303              		.cfi_offset 7, -8
 304              		.cfi_offset 14, -4
 305 0002 82B0     		sub	sp, sp, #8
 306              		.cfi_def_cfa_offset 16
 307 0004 00AF     		add	r7, sp, #0
 308              		.cfi_def_cfa_register 7
  82:../src/rfm12.c **** 	SS_LO();
 309              		.loc 1 82 0
 310 0006 4FF44063 		mov	r3, #3072
 311 000a C4F20103 		movt	r3, 16385
 312 000e 4FF08052 		mov	r2, #268435456
 313 0012 1A61     		str	r2, [r3, #16]
  83:../src/rfm12.c **** 	uint16_t status = 0;
 314              		.loc 1 83 0
 315 0014 0023     		movs	r3, #0
 316 0016 FB80     		strh	r3, [r7, #6]	@ movhi
 317              	.LBB23:
  84:../src/rfm12.c **** 	for(int i = 16; i --> 0; ) {
 318              		.loc 1 84 0
 319 0018 1023     		movs	r3, #16
 320 001a 3B60     		str	r3, [r7]
 321 001c 2AE0     		b	.L9
 322              	.L10:
  85:../src/rfm12.c **** 		MOSI_LO();
 323              		.loc 1 85 0
 324 001e 4FF44063 		mov	r3, #3072
 325 0022 C4F20103 		movt	r3, 16385
 326 0026 4FF00042 		mov	r2, #-2147483648
 327 002a 1A61     		str	r2, [r3, #16]
  86:../src/rfm12.c **** 		SCK_LO();
 328              		.loc 1 86 0
 329 002c 4FF44063 		mov	r3, #3072
 330 0030 C4F20103 		movt	r3, 16385
 331 0034 4FF00052 		mov	r2, #536870912
 332 0038 1A61     		str	r2, [r3, #16]
  87:../src/rfm12.c **** 		__fixedDelay();
 333              		.loc 1 87 0
 334 003a FFF7FEFF 		bl	__fixedDelay
  88:../src/rfm12.c **** 		SCK_HI();
 335              		.loc 1 88 0
 336 003e 4FF44063 		mov	r3, #3072
 337 0042 C4F20103 		movt	r3, 16385
 338 0046 4FF40052 		mov	r2, #8192
 339 004a 1A61     		str	r2, [r3, #16]
  89:../src/rfm12.c **** 		__fixedDelay();
 340              		.loc 1 89 0
 341 004c FFF7FEFF 		bl	__fixedDelay
  90:../src/rfm12.c **** 		if(GPIOB->IDR & GPIO_IDR_IDR14) {
 342              		.loc 1 90 0
 343 0050 4FF44063 		mov	r3, #3072
 344 0054 C4F20103 		movt	r3, 16385
 345 0058 9B68     		ldr	r3, [r3, #8]
 346 005a 03F48043 		and	r3, r3, #16384
 347 005e 002B     		cmp	r3, #0
 348 0060 08D0     		beq	.L9
  91:../src/rfm12.c **** 			status |= (1 << i);
 349              		.loc 1 91 0
 350 0062 0122     		movs	r2, #1
 351 0064 3B68     		ldr	r3, [r7]
 352 0066 02FA03F3 		lsl	r3, r2, r3
 353 006a 9AB2     		uxth	r2, r3
 354 006c FB88     		ldrh	r3, [r7, #6]
 355 006e 1343     		orrs	r3, r3, r2
 356 0070 9BB2     		uxth	r3, r3
 357 0072 FB80     		strh	r3, [r7, #6]	@ movhi
 358              	.L9:
  84:../src/rfm12.c **** 		MOSI_LO();
 359              		.loc 1 84 0 discriminator 1
 360 0074 3B68     		ldr	r3, [r7]
 361 0076 5A1E     		subs	r2, r3, #1
 362 0078 3A60     		str	r2, [r7]
 363 007a 002B     		cmp	r3, #0
 364 007c CFDC     		bgt	.L10
 365              	.LBE23:
  92:../src/rfm12.c **** 		}
  93:../src/rfm12.c **** 	}
  94:../src/rfm12.c **** 	SCK_LO();
 366              		.loc 1 94 0
 367 007e 4FF44063 		mov	r3, #3072
 368 0082 C4F20103 		movt	r3, 16385
 369 0086 4FF00052 		mov	r2, #536870912
 370 008a 1A61     		str	r2, [r3, #16]
  95:../src/rfm12.c **** 	SS_HI();
 371              		.loc 1 95 0
 372 008c 4FF44063 		mov	r3, #3072
 373 0090 C4F20103 		movt	r3, 16385
 374 0094 4FF48052 		mov	r2, #4096
 375 0098 1A61     		str	r2, [r3, #16]
  96:../src/rfm12.c **** 	return status;
 376              		.loc 1 96 0
 377 009a FB88     		ldrh	r3, [r7, #6]
  97:../src/rfm12.c **** }
 378              		.loc 1 97 0
 379 009c 1846     		mov	r0, r3
 380 009e 0837     		adds	r7, r7, #8
 381 00a0 BD46     		mov	sp, r7
 382              		@ sp needed
 383 00a2 80BD     		pop	{r7, pc}
 384              		.cfi_endproc
 385              	.LFE59:
 387              		.section	.text.RFM12_send,"ax",%progbits
 388              		.align	2
 389              		.global	RFM12_send
 390              		.thumb
 391              		.thumb_func
 393              	RFM12_send:
 394              	.LFB60:
  98:../src/rfm12.c **** 
  99:../src/rfm12.c **** void RFM12_send(uint8_t data) {
 395              		.loc 1 99 0
 396              		.cfi_startproc
 397              		@ args = 0, pretend = 0, frame = 8
 398              		@ frame_needed = 1, uses_anonymous_args = 0
 399 0000 80B5     		push	{r7, lr}
 400              		.cfi_def_cfa_offset 8
 401              		.cfi_offset 7, -8
 402              		.cfi_offset 14, -4
 403 0002 82B0     		sub	sp, sp, #8
 404              		.cfi_def_cfa_offset 16
 405 0004 00AF     		add	r7, sp, #0
 406              		.cfi_def_cfa_register 7
 407 0006 0346     		mov	r3, r0
 408 0008 FB71     		strb	r3, [r7, #7]
 100:../src/rfm12.c **** 	while(GPIOB->IDR & GPIO_IDR_IDR5);
 409              		.loc 1 100 0
 410 000a 00BF     		nop
 411              	.L13:
 412              		.loc 1 100 0 is_stmt 0 discriminator 1
 413 000c 4FF44063 		mov	r3, #3072
 414 0010 C4F20103 		movt	r3, 16385
 415 0014 9B68     		ldr	r3, [r3, #8]
 416 0016 03F02003 		and	r3, r3, #32
 417 001a 002B     		cmp	r3, #0
 418 001c F6D1     		bne	.L13
 101:../src/rfm12.c **** 	RFM12_writeCMD(0xB800 | data);
 419              		.loc 1 101 0 is_stmt 1
 420 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 421 0020 9AB2     		uxth	r2, r3
 422 0022 4FF43843 		mov	r3, #47104
 423 0026 CFF6FF73 		movt	r3, 65535
 424 002a 1343     		orrs	r3, r3, r2
 425 002c 9BB2     		uxth	r3, r3
 426 002e 1846     		mov	r0, r3
 427 0030 FFF7FEFF 		bl	RFM12_writeCMD
 102:../src/rfm12.c **** }
 428              		.loc 1 102 0
 429 0034 0837     		adds	r7, r7, #8
 430 0036 BD46     		mov	sp, r7
 431              		@ sp needed
 432 0038 80BD     		pop	{r7, pc}
 433              		.cfi_endproc
 434              	.LFE60:
 436 003a 00BF     		.section	.text.RFM12_init,"ax",%progbits
 437              		.align	2
 438              		.global	RFM12_init
 439              		.thumb
 440              		.thumb_func
 442              	RFM12_init:
 443              	.LFB61:
 103:../src/rfm12.c **** 
 104:../src/rfm12.c **** void RFM12_init() {
 444              		.loc 1 104 0
 445              		.cfi_startproc
 446              		@ args = 0, pretend = 0, frame = 0
 447              		@ frame_needed = 1, uses_anonymous_args = 0
 448 0000 80B5     		push	{r7, lr}
 449              		.cfi_def_cfa_offset 8
 450              		.cfi_offset 7, -8
 451              		.cfi_offset 14, -4
 452 0002 00AF     		add	r7, sp, #0
 453              		.cfi_def_cfa_register 7
 105:../src/rfm12.c **** 	RFM12_writeCMD(0x80D7); //"Configuration Settings": 433MHz, 12pF, TXreg, RXFIFOBuf
 454              		.loc 1 105 0
 455 0004 48F2D700 		movw	r0, #32983
 456 0008 FFF7FEFF 		bl	RFM12_writeCMD
 106:../src/rfm12.c **** 	RFM12_writeCMD(0x8208); //"Power Management": osc. on
 457              		.loc 1 106 0
 458 000c 48F20820 		movw	r0, #33288
 459 0010 FFF7FEFF 		bl	RFM12_writeCMD
 107:../src/rfm12.c **** 	RFM12_writeCMD(0xA620); //"Frequency Setting": 433.9200MHz
 460              		.loc 1 107 0
 461 0014 4AF22060 		movw	r0, #42528
 462 0018 FFF7FEFF 		bl	RFM12_writeCMD
 108:../src/rfm12.c **** 	RFM12_writeCMD(0xC623); //"Data Rate": 9.579kbps
 463              		.loc 1 108 0
 464 001c 4CF22360 		movw	r0, #50723
 465 0020 FFF7FEFF 		bl	RFM12_writeCMD
 109:../src/rfm12.c **** 	RFM12_writeCMD(0x94A0); //"Receiver Control": PINVDI, VDIFAST, RXBW=134kHz, LNAG=0dBm, DRSSI=-103d
 466              		.loc 1 109 0
 467 0024 49F2A040 		movw	r0, #38048
 468 0028 FFF7FEFF 		bl	RFM12_writeCMD
 110:../src/rfm12.c **** 	RFM12_writeCMD(0xC2AC); //"Data Filter & Clock Recovery": RCEOVERMODE=AUTO, RCEOVERSPEED=SLOW, QAT
 469              		.loc 1 110 0
 470 002c 4CF2AC20 		movw	r0, #49836
 471 0030 FFF7FEFF 		bl	RFM12_writeCMD
 111:../src/rfm12.c **** 	RFM12_writeCMD(0xCA83); //"FIFO and Reset Mode": FIFOINTLevel=8, FIFOFillStart=Sync, RSTSENS=Low, 
 472              		.loc 1 111 0
 473 0034 4CF68320 		movw	r0, #51843
 474 0038 FFF7FEFF 		bl	RFM12_writeCMD
 112:../src/rfm12.c **** 	RFM12_writeCMD(0xCED4); //"Synchronization Pattern":SYNC=2DD4；
 475              		.loc 1 112 0
 476 003c 4CF6D460 		movw	r0, #52948
 477 0040 FFF7FEFF 		bl	RFM12_writeCMD
 113:../src/rfm12.c **** 	RFM12_writeCMD(0xC483); //"Automatic Frequency Control": AFC=EN, OFFSREG=EN, NO RSTRIC
 478              		.loc 1 113 0
 479 0044 4CF28340 		movw	r0, #50307
 480 0048 FFF7FEFF 		bl	RFM12_writeCMD
 114:../src/rfm12.c **** 	RFM12_writeCMD(0x9820); //"TX Control": 45kHz, MAX OUT
 481              		.loc 1 114 0
 482 004c 49F62000 		movw	r0, #38944
 483 0050 FFF7FEFF 		bl	RFM12_writeCMD
 115:../src/rfm12.c **** 	RFM12_writeCMD(0xCC57); //"PLL Settings": DITHER=DISABLE, CLKRISE=SLOW, PLLB=256kbps
 484              		.loc 1 115 0
 485 0054 4CF65740 		movw	r0, #52311
 486 0058 FFF7FEFF 		bl	RFM12_writeCMD
 116:../src/rfm12.c **** 	RFM12_writeCMD(0xE000); //"Wake-Up Timer":NOT USE
 487              		.loc 1 116 0
 488 005c 4FF46040 		mov	r0, #57344
 489 0060 FFF7FEFF 		bl	RFM12_writeCMD
 117:../src/rfm12.c **** 	RFM12_writeCMD(0xC800); //"Low Duty-Cycle":NOT USE
 490              		.loc 1 117 0
 491 0064 4FF44840 		mov	r0, #51200
 492 0068 FFF7FEFF 		bl	RFM12_writeCMD
 118:../src/rfm12.c **** 	RFM12_writeCMD(0xC080); //"Low Battery Detect and µC Clock":2.5MHz,2.2V
 493              		.loc 1 118 0
 494 006c 4CF28000 		movw	r0, #49280
 495 0070 FFF7FEFF 		bl	RFM12_writeCMD
 119:../src/rfm12.c **** }
 496              		.loc 1 119 0
 497 0074 80BD     		pop	{r7, pc}
 498              		.cfi_endproc
 499              	.LFE61:
 501 0076 00BF     		.section	.text.RFM12_reset,"ax",%progbits
 502              		.align	2
 503              		.global	RFM12_reset
 504              		.thumb
 505              		.thumb_func
 507              	RFM12_reset:
 508              	.LFB62:
 120:../src/rfm12.c **** 
 121:../src/rfm12.c **** void RFM12_reset() {
 509              		.loc 1 121 0
 510              		.cfi_startproc
 511              		@ args = 0, pretend = 0, frame = 0
 512              		@ frame_needed = 1, uses_anonymous_args = 0
 513 0000 80B5     		push	{r7, lr}
 514              		.cfi_def_cfa_offset 8
 515              		.cfi_offset 7, -8
 516              		.cfi_offset 14, -4
 517 0002 00AF     		add	r7, sp, #0
 518              		.cfi_def_cfa_register 7
 122:../src/rfm12.c **** 	GPIOB->BSRR = GPIO_BSRR_BR6;
 519              		.loc 1 122 0
 520 0004 4FF44063 		mov	r3, #3072
 521 0008 C4F20103 		movt	r3, 16385
 522 000c 4FF48002 		mov	r2, #4194304
 523 0010 1A61     		str	r2, [r3, #16]
 123:../src/rfm12.c **** 	delayMs(100);
 524              		.loc 1 123 0
 525 0012 6420     		movs	r0, #100
 526 0014 FFF7FEFF 		bl	delayMs
 124:../src/rfm12.c **** 	GPIOB->BSRR = GPIO_BSRR_BS6;
 527              		.loc 1 124 0
 528 0018 4FF44063 		mov	r3, #3072
 529 001c C4F20103 		movt	r3, 16385
 530 0020 4022     		movs	r2, #64
 531 0022 1A61     		str	r2, [r3, #16]
 125:../src/rfm12.c **** }
 532              		.loc 1 125 0
 533 0024 80BD     		pop	{r7, pc}
 534              		.cfi_endproc
 535              	.LFE62:
 537 0026 00BF     		.section	.text.RFM12_setBand,"ax",%progbits
 538              		.align	2
 539              		.global	RFM12_setBand
 540              		.thumb
 541              		.thumb_func
 543              	RFM12_setBand:
 544              	.LFB63:
 126:../src/rfm12.c **** 
 127:../src/rfm12.c **** void RFM12_setBand(int band) {
 545              		.loc 1 127 0
 546              		.cfi_startproc
 547              		@ args = 0, pretend = 0, frame = 8
 548              		@ frame_needed = 1, uses_anonymous_args = 0
 549 0000 80B5     		push	{r7, lr}
 550              		.cfi_def_cfa_offset 8
 551              		.cfi_offset 7, -8
 552              		.cfi_offset 14, -4
 553 0002 82B0     		sub	sp, sp, #8
 554              		.cfi_def_cfa_offset 16
 555 0004 00AF     		add	r7, sp, #0
 556              		.cfi_def_cfa_register 7
 557 0006 7860     		str	r0, [r7, #4]
 128:../src/rfm12.c **** 	RFM12_writeCMD(0x80C7 | ((band & 0x3) << 4));
 558              		.loc 1 128 0
 559 0008 7B68     		ldr	r3, [r7, #4]
 560 000a 03F00303 		and	r3, r3, #3
 561 000e 1B01     		lsls	r3, r3, #4
 562 0010 9BB2     		uxth	r3, r3
 563 0012 43F07F43 		orr	r3, r3, #-16777216
 564 0016 43F47F03 		orr	r3, r3, #16711680
 565 001a 43F40043 		orr	r3, r3, #32768
 566 001e 43F0C703 		orr	r3, r3, #199
 567 0022 9BB2     		uxth	r3, r3
 568 0024 9BB2     		uxth	r3, r3
 569 0026 1846     		mov	r0, r3
 570 0028 FFF7FEFF 		bl	RFM12_writeCMD
 129:../src/rfm12.c **** }
 571              		.loc 1 129 0
 572 002c 0837     		adds	r7, r7, #8
 573 002e BD46     		mov	sp, r7
 574              		@ sp needed
 575 0030 80BD     		pop	{r7, pc}
 576              		.cfi_endproc
 577              	.LFE63:
 579 0032 00BF     		.section	.text.RFM12_setFreq,"ax",%progbits
 580              		.align	2
 581              		.global	RFM12_setFreq
 582              		.thumb
 583              		.thumb_func
 585              	RFM12_setFreq:
 586              	.LFB64:
 130:../src/rfm12.c **** 
 131:../src/rfm12.c **** void RFM12_setFreq(int band, uint32_t freq) {
 587              		.loc 1 131 0
 588              		.cfi_startproc
 589              		@ args = 0, pretend = 0, frame = 8
 590              		@ frame_needed = 1, uses_anonymous_args = 0
 591 0000 80B5     		push	{r7, lr}
 592              		.cfi_def_cfa_offset 8
 593              		.cfi_offset 7, -8
 594              		.cfi_offset 14, -4
 595 0002 82B0     		sub	sp, sp, #8
 596              		.cfi_def_cfa_offset 16
 597 0004 00AF     		add	r7, sp, #0
 598              		.cfi_def_cfa_register 7
 599 0006 7860     		str	r0, [r7, #4]
 600 0008 3960     		str	r1, [r7]
 132:../src/rfm12.c **** 	if(band == 0) {
 601              		.loc 1 132 0
 602 000a 7B68     		ldr	r3, [r7, #4]
 603 000c 002B     		cmp	r3, #0
 604 000e 1DD1     		bne	.L18
 133:../src/rfm12.c **** 		RFM12_writeCMD(0xA000 | ((10 * (freq - 310000) / 25) & 0xFFF));
 605              		.loc 1 133 0
 606 0010 3A68     		ldr	r2, [r7]
 607 0012 1346     		mov	r3, r2
 608 0014 9B00     		lsls	r3, r3, #2
 609 0016 1344     		add	r3, r3, r2
 610 0018 5B00     		lsls	r3, r3, #1
 611 001a A3F53D12 		sub	r2, r3, #3096576
 612 001e A2F55662 		sub	r2, r2, #3424
 613 0022 48F21F53 		movw	r3, #34079
 614 0026 C5F2EB13 		movt	r3, 20971
 615 002a A3FB0213 		umull	r1, r3, r3, r2
 616 002e DB08     		lsrs	r3, r3, #3
 617 0030 9BB2     		uxth	r3, r3
 618 0032 C3F30B03 		ubfx	r3, r3, #0, #12
 619 0036 9AB2     		uxth	r2, r3
 620 0038 4FF42043 		mov	r3, #40960
 621 003c CFF6FF73 		movt	r3, 65535
 622 0040 1343     		orrs	r3, r3, r2
 623 0042 9BB2     		uxth	r3, r3
 624 0044 1846     		mov	r0, r3
 625 0046 FFF7FEFF 		bl	RFM12_writeCMD
 626 004a 63E0     		b	.L17
 627              	.L18:
 134:../src/rfm12.c **** 	} else if(band == 1) {
 628              		.loc 1 134 0
 629 004c 7B68     		ldr	r3, [r7, #4]
 630 004e 012B     		cmp	r3, #1
 631 0050 1DD1     		bne	.L20
 135:../src/rfm12.c **** 		RFM12_writeCMD(0xA000 | ((10 * (freq - 430000) / 25) & 0xFFF));
 632              		.loc 1 135 0
 633 0052 3A68     		ldr	r2, [r7]
 634 0054 1346     		mov	r3, r2
 635 0056 9B00     		lsls	r3, r3, #2
 636 0058 1344     		add	r3, r3, r2
 637 005a 5B00     		lsls	r3, r3, #1
 638 005c A3F58302 		sub	r2, r3, #4292608
 639 0060 A2F5E752 		sub	r2, r2, #7392
 640 0064 48F21F53 		movw	r3, #34079
 641 0068 C5F2EB13 		movt	r3, 20971
 642 006c A3FB0213 		umull	r1, r3, r3, r2
 643 0070 DB08     		lsrs	r3, r3, #3
 644 0072 9BB2     		uxth	r3, r3
 645 0074 C3F30B03 		ubfx	r3, r3, #0, #12
 646 0078 9AB2     		uxth	r2, r3
 647 007a 4FF42043 		mov	r3, #40960
 648 007e CFF6FF73 		movt	r3, 65535
 649 0082 1343     		orrs	r3, r3, r2
 650 0084 9BB2     		uxth	r3, r3
 651 0086 1846     		mov	r0, r3
 652 0088 FFF7FEFF 		bl	RFM12_writeCMD
 653 008c 42E0     		b	.L17
 654              	.L20:
 136:../src/rfm12.c **** 	} else if(band == 2) {
 655              		.loc 1 136 0
 656 008e 7B68     		ldr	r3, [r7, #4]
 657 0090 022B     		cmp	r3, #2
 658 0092 1DD1     		bne	.L21
 137:../src/rfm12.c **** 		RFM12_writeCMD(0xA000 | ((10 * (freq - 860000) / 50) & 0xFFF));
 659              		.loc 1 137 0
 660 0094 3A68     		ldr	r2, [r7]
 661 0096 1346     		mov	r3, r2
 662 0098 9B00     		lsls	r3, r3, #2
 663 009a 1344     		add	r3, r3, r2
 664 009c 5B00     		lsls	r3, r3, #1
 665 009e A3F50302 		sub	r2, r3, #8585216
 666 00a2 A2F56752 		sub	r2, r2, #14784
 667 00a6 48F21F53 		movw	r3, #34079
 668 00aa C5F2EB13 		movt	r3, 20971
 669 00ae A3FB0213 		umull	r1, r3, r3, r2
 670 00b2 1B09     		lsrs	r3, r3, #4
 671 00b4 9BB2     		uxth	r3, r3
 672 00b6 C3F30B03 		ubfx	r3, r3, #0, #12
 673 00ba 9AB2     		uxth	r2, r3
 674 00bc 4FF42043 		mov	r3, #40960
 675 00c0 CFF6FF73 		movt	r3, 65535
 676 00c4 1343     		orrs	r3, r3, r2
 677 00c6 9BB2     		uxth	r3, r3
 678 00c8 1846     		mov	r0, r3
 679 00ca FFF7FEFF 		bl	RFM12_writeCMD
 680 00ce 21E0     		b	.L17
 681              	.L21:
 138:../src/rfm12.c **** 	} else if(band == 3) {
 682              		.loc 1 138 0
 683 00d0 7B68     		ldr	r3, [r7, #4]
 684 00d2 032B     		cmp	r3, #3
 685 00d4 1ED1     		bne	.L17
 139:../src/rfm12.c **** 		RFM12_writeCMD(0xA000 | ((10 * (freq - 900000) / 75) & 0xFFF));
 686              		.loc 1 139 0
 687 00d6 3A68     		ldr	r2, [r7]
 688 00d8 1346     		mov	r3, r2
 689 00da 9B00     		lsls	r3, r3, #2
 690 00dc 1344     		add	r3, r3, r2
 691 00de 5B00     		lsls	r3, r3, #1
 692 00e0 1A46     		mov	r2, r3
 693 00e2 4AF6C033 		movw	r3, #43968
 694 00e6 CFF67673 		movt	r3, 65398
 695 00ea 1344     		add	r3, r3, r2
 696 00ec 48F2B512 		movw	r2, #33205
 697 00f0 C1F64E32 		movt	r2, 6990
 698 00f4 A2FB0313 		umull	r1, r3, r2, r3
 699 00f8 DB08     		lsrs	r3, r3, #3
 700 00fa 9BB2     		uxth	r3, r3
 701 00fc C3F30B03 		ubfx	r3, r3, #0, #12
 702 0100 9AB2     		uxth	r2, r3
 703 0102 4FF42043 		mov	r3, #40960
 704 0106 CFF6FF73 		movt	r3, 65535
 705 010a 1343     		orrs	r3, r3, r2
 706 010c 9BB2     		uxth	r3, r3
 707 010e 1846     		mov	r0, r3
 708 0110 FFF7FEFF 		bl	RFM12_writeCMD
 709              	.L17:
 140:../src/rfm12.c **** 	}
 141:../src/rfm12.c **** }
 710              		.loc 1 141 0
 711 0114 0837     		adds	r7, r7, #8
 712 0116 BD46     		mov	sp, r7
 713              		@ sp needed
 714 0118 80BD     		pop	{r7, pc}
 715              		.cfi_endproc
 716              	.LFE64:
 718 011a 00BF     		.section	.text.main,"ax",%progbits
 719              		.align	2
 720              		.global	main
 721              		.thumb
 722              		.thumb_func
 724              	main:
 725              	.LFB65:
 142:../src/rfm12.c **** 
 143:../src/rfm12.c **** //static uint32_t getRand() {
 144:../src/rfm12.c **** //    static uint32_t lfsr = 1;
 145:../src/rfm12.c **** //    return (lfsr = (lfsr >> 1) ^ ((uint32_t)(0 - (uint32_t)(lfsr & 1)) & 0xC0109200));
 146:../src/rfm12.c **** //}
 147:../src/rfm12.c **** 
 148:../src/rfm12.c **** int main() {
 726              		.loc 1 148 0
 727              		.cfi_startproc
 728              		@ args = 0, pretend = 0, frame = 0
 729              		@ frame_needed = 1, uses_anonymous_args = 0
 730 0000 80B5     		push	{r7, lr}
 731              		.cfi_def_cfa_offset 8
 732              		.cfi_offset 7, -8
 733              		.cfi_offset 14, -4
 734 0002 00AF     		add	r7, sp, #0
 735              		.cfi_def_cfa_register 7
 149:../src/rfm12.c **** 	delayInit();
 736              		.loc 1 149 0
 737 0004 FFF7FEFF 		bl	delayInit
 150:../src/rfm12.c **** 	GPIO_config();
 738              		.loc 1 150 0
 739 0008 FFF7FEFF 		bl	GPIO_config
 151:../src/rfm12.c **** 	RFM12_reset();
 740              		.loc 1 151 0
 741 000c FFF7FEFF 		bl	RFM12_reset
 152:../src/rfm12.c **** 	delayMs(200);
 742              		.loc 1 152 0
 743 0010 C820     		movs	r0, #200
 744 0012 FFF7FEFF 		bl	delayMs
 153:../src/rfm12.c **** 	RFM12_init();
 745              		.loc 1 153 0
 746 0016 FFF7FEFF 		bl	RFM12_init
 747              	.L23:
 154:../src/rfm12.c **** 
 155:../src/rfm12.c **** //	RFM12_writeCMD(0x0);
 156:../src/rfm12.c **** //	RFM12_writeCMD(0xB8AA);
 157:../src/rfm12.c **** //	RFM12_writeCMD(0xB8AA);
 158:../src/rfm12.c **** //	RFM12_writeCMD(0x8238); //TXON
 159:../src/rfm12.c **** //	delayMs(1);
 160:../src/rfm12.c **** 
 161:../src/rfm12.c **** 
 162:../src/rfm12.c **** 	while (1) {
 163:../src/rfm12.c **** 	RFM12_writeCMD(0x0);
 748              		.loc 1 163 0 discriminator 1
 749 001a 0020     		movs	r0, #0
 750 001c FFF7FEFF 		bl	RFM12_writeCMD
 164:../src/rfm12.c **** 	RFM12_writeCMD(0xB8AA);
 751              		.loc 1 164 0 discriminator 1
 752 0020 4BF6AA00 		movw	r0, #47274
 753 0024 FFF7FEFF 		bl	RFM12_writeCMD
 165:../src/rfm12.c **** 	RFM12_writeCMD(0xB8AA);
 754              		.loc 1 165 0 discriminator 1
 755 0028 4BF6AA00 		movw	r0, #47274
 756 002c FFF7FEFF 		bl	RFM12_writeCMD
 166:../src/rfm12.c **** 	RFM12_writeCMD(0x8238); //TXON
 757              		.loc 1 166 0 discriminator 1
 758 0030 48F23820 		movw	r0, #33336
 759 0034 FFF7FEFF 		bl	RFM12_writeCMD
 167:../src/rfm12.c **** 	delayMs(1);
 760              		.loc 1 167 0 discriminator 1
 761 0038 0120     		movs	r0, #1
 762 003a FFF7FEFF 		bl	delayMs
 168:../src/rfm12.c **** 	RFM12_writeCMD(0x8208); //TXOFF
 763              		.loc 1 168 0 discriminator 1
 764 003e 48F20820 		movw	r0, #33288
 765 0042 FFF7FEFF 		bl	RFM12_writeCMD
 169:../src/rfm12.c **** 	delayMs(1);
 766              		.loc 1 169 0 discriminator 1
 767 0046 0120     		movs	r0, #1
 768 0048 FFF7FEFF 		bl	delayMs
 170:../src/rfm12.c **** 
 171:../src/rfm12.c **** //		uint32_t r = getRand();
 172:../src/rfm12.c **** //		RFM12_send((r >> 0) & 0xFF);
 173:../src/rfm12.c **** //		RFM12_send((r >> 8) & 0xFF);
 174:../src/rfm12.c **** //		RFM12_send((r >> 16) & 0xFF);
 175:../src/rfm12.c **** //		RFM12_send((r >> 24) & 0xFF);
 176:../src/rfm12.c **** 	}
 769              		.loc 1 176 0 discriminator 1
 770 004c E5E7     		b	.L23
 771              		.cfi_endproc
 772              	.LFE65:
 774 004e 00BF     		.text
 775              	.Letext0:
 776              		.file 3 "c:\\program files (x86)\\mentorgraphics\\sourcery_codebench_lite_for_arm_eabi\\arm-none-e
 777              		.file 4 "D:\\workspace\\rfm12\\stm32_std\\CMSIS\\CM3\\DeviceSupport\\ST\\STM32F10x/stm32f10x.h"
 778              		.file 5 "D:\\workspace\\rfm12\\stm32_std\\STM32F10x_StdPeriph_Driver\\inc/stm32f10x_gpio.h"
 779              		.file 6 "D:\\workspace\\rfm12\\stm32_std\\CMSIS\\CM3\\CoreSupport/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 rfm12.c
C:\Users\Serj\AppData\Local\Temp\ccrXXqvs.s:19     .text.GPIO_config:00000000 $t
C:\Users\Serj\AppData\Local\Temp\ccrXXqvs.s:24     .text.GPIO_config:00000000 GPIO_config
C:\Users\Serj\AppData\Local\Temp\ccrXXqvs.s:130    .text.__fixedDelay:00000000 $t
C:\Users\Serj\AppData\Local\Temp\ccrXXqvs.s:134    .text.__fixedDelay:00000000 __fixedDelay
C:\Users\Serj\AppData\Local\Temp\ccrXXqvs.s:197    .text.RFM12_writeCMD:00000000 $t
C:\Users\Serj\AppData\Local\Temp\ccrXXqvs.s:202    .text.RFM12_writeCMD:00000000 RFM12_writeCMD
C:\Users\Serj\AppData\Local\Temp\ccrXXqvs.s:290    .text.RFM12_readStatus:00000000 $t
C:\Users\Serj\AppData\Local\Temp\ccrXXqvs.s:295    .text.RFM12_readStatus:00000000 RFM12_readStatus
C:\Users\Serj\AppData\Local\Temp\ccrXXqvs.s:388    .text.RFM12_send:00000000 $t
C:\Users\Serj\AppData\Local\Temp\ccrXXqvs.s:393    .text.RFM12_send:00000000 RFM12_send
C:\Users\Serj\AppData\Local\Temp\ccrXXqvs.s:437    .text.RFM12_init:00000000 $t
C:\Users\Serj\AppData\Local\Temp\ccrXXqvs.s:442    .text.RFM12_init:00000000 RFM12_init
C:\Users\Serj\AppData\Local\Temp\ccrXXqvs.s:502    .text.RFM12_reset:00000000 $t
C:\Users\Serj\AppData\Local\Temp\ccrXXqvs.s:507    .text.RFM12_reset:00000000 RFM12_reset
C:\Users\Serj\AppData\Local\Temp\ccrXXqvs.s:538    .text.RFM12_setBand:00000000 $t
C:\Users\Serj\AppData\Local\Temp\ccrXXqvs.s:543    .text.RFM12_setBand:00000000 RFM12_setBand
C:\Users\Serj\AppData\Local\Temp\ccrXXqvs.s:580    .text.RFM12_setFreq:00000000 $t
C:\Users\Serj\AppData\Local\Temp\ccrXXqvs.s:585    .text.RFM12_setFreq:00000000 RFM12_setFreq
C:\Users\Serj\AppData\Local\Temp\ccrXXqvs.s:719    .text.main:00000000 $t
C:\Users\Serj\AppData\Local\Temp\ccrXXqvs.s:724    .text.main:00000000 main
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.69ef232822fae12fd5bc55108b75a1e4
                           .group:00000000 wm4.stm32f10x.h.51.b859cb68ed44ee02c916b41cb8c68f1c
                           .group:00000000 wm4.core_cm3.h.47.c45d264953076019d6b3b1c20e8ad771
                           .group:00000000 wm4.newlib.h.8.384a112feabb3bef7b573ae48cde2e3b
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4.config.h.183.aa62afef667fb61d15fa64c48beb2f14
                           .group:00000000 wm4._ansi.h.23.2147fde150631f5584b9dc29b914d1b8
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm3.h.144.f4158be2ca5a330459fef4214a4bb0f1
                           .group:00000000 wm4.stm32f10x.h.522.a925aafc848b1f088438cf0e9b167b78
                           .group:00000000 wm4.stm32f10x_adc.h.83.4d35a50d598070ecea6f33bcef02c922
                           .group:00000000 wm4.stm32f10x_bkp.h.25.4622919f1e30efdad5eb44e12edd5513
                           .group:00000000 wm4.stm32f10x_can.h.25.48aab46fcce6d08400bf960b028e4698
                           .group:00000000 wm4.stm32f10x_cec.h.25.8f03450e7bbb704d96e7bc73ec0f66a7
                           .group:00000000 wm4.stm32f10x_dac.h.25.d946244edf026333094657d55ea894b8
                           .group:00000000 wm4.stm32f10x_dbgmcu.h.25.d3351200fc7f9c8615d1ae81d40db08a
                           .group:00000000 wm4.stm32f10x_dma.h.25.94e36204daa98cae5dcc70a10a9694d5
                           .group:00000000 wm4.stm32f10x_exti.h.25.b9064155c5c006b5154b39788c79001a
                           .group:00000000 wm4.stm32f10x_flash.h.25.4be61fcb02863962a1e006449d310650
                           .group:00000000 wm4.stm32f10x_fsmc.h.25.bca154da2699cdb6024c0c6c4fc5aa89
                           .group:00000000 wm4.stm32f10x_gpio.h.25.80c981af0e637567395034c576cfb3ce
                           .group:00000000 wm4.stm32f10x_i2c.h.25.7b6cbaea24c6f25f538f8516d1814cb2
                           .group:00000000 wm4.stm32f10x_iwdg.h.25.da9374ab9856795610487f312ccf3122
                           .group:00000000 wm4.stm32f10x_pwr.h.25.37ef75009f751ef5fe27910e0bf00a62
                           .group:00000000 wm4.stm32f10x_rcc.h.25.fe8897e7491f2eb0cff54551d08eb765
                           .group:00000000 wm4.stm32f10x_rtc.h.25.361142606ba98ddcd10369f321f6e636
                           .group:00000000 wm4.stm32f10x_sdio.h.25.1fb5280a7690ef99070096bf8c866b3a
                           .group:00000000 wm4.stm32f10x_spi.h.25.68b3d5ccfcf895f9fe505ce20c0c300f
                           .group:00000000 wm4.stm32f10x_tim.h.25.21c6ec062f1e74898cb96a57da276fec
                           .group:00000000 wm4.stm32f10x_usart.h.25.29629c699b65db3f3efd3561f66b0bf6
                           .group:00000000 wm4.stm32f10x_wwdg.h.25.dde12201d86b5aa9ecaafb5eccdc6549
                           .group:00000000 wm4.misc.h.25.068e106f368fa5369a681ef57c106f4b
                           .group:00000000 wm4.stm32f10x.h.8304.f7d8ad90959e99679b3257267c3aadfe

UNDEFINED SYMBOLS
RCC_APB2PeriphClockCmd
GPIO_Init
delayMs
delayInit
